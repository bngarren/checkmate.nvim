*checkmate.txt*          For Neovim >= 0.10.0         Last change: 2025 May 14

==============================================================================
Table of Contents                                *checkmate-table-of-contents*

1. Installation                                       |checkmate-installation|
  - Requirements                         |checkmate-installation-requirements|
2. Usage                                                     |checkmate-usage|
3. Commands                                               |checkmate-commands|
4. Config                                                   |checkmate-config|
  - Metadata                                       |checkmate-config-metadata|
  - Todo count indicator               |checkmate-config-todo-count-indicator|
5. Linting                                                 |checkmate-linting|
6. Roadmap                                                 |checkmate-roadmap|
7. Contributing                                       |checkmate-contributing|
8. Credits                                                 |checkmate-credits|
9. Links                                                     |checkmate-links|



A Markdown-based todo list plugin for Neovim with a nice UI and full
customization options.


FEATURES ~

- Stores todos in plain Markdown format (compatible with other apps)
- Unicode symbol support for more beautiful todo items
- Customizable markers and colors
- Visual mode support for toggling multiple items at once
- Metadata e.g.Â `@tag(value)` annotations with extensive customization
    - e.g. @started, @done, @priority, @your-custom-tag
- Todo completion counts





https://github.com/user-attachments/assets/a8c018ac-69a4-4bf7-8ea3-ecbdf4dda661


==============================================================================
1. Installation                                       *checkmate-installation*


REQUIREMENTS                             *checkmate-installation-requirements*

- Neovim 0.10 or higher


USING LAZY.NVIM ~

>lua
    {
        "bngarren/checkmate.nvim",
        ft = "markdown" -- Lazy loads for Markdown files matching patterns in 'files'
        opts = {
            -- your configuration here
            -- or leave empty to use defaults
        },
    
    }
<


==============================================================================
2. Usage                                                     *checkmate-usage*


1. OPEN OR CREATE A TODO FILE

- Create or open a markdown file that matches one of your configured patterns (defaults are `TODO.md`, `todo.md`, `*.todo.md`)
- The plugin automatically activates for markdown files matching your configured patterns


  You can customize which files activate Checkmate using the `files`
  configuration option.

2. CREATE TODO ITEMS

- Use the **mapped key** (_recommended_, default: `<leader>Tn`) or the `:CheckmateCreate` command
- Or manually using Markdown syntax:

>md
    - [ ] Unchecked todo
    - [x] Checked todo
<

(These will automatically convert when you leave insert mode!)


3. MANAGE YOUR TASKS

- Toggle items with `:CheckmateToggle` (default: `<leader>Tt`)
- Check items with `:CheckmateCheck` (default: `<leader>Tc`)
- Uncheck items with `:CheckmateUncheck` (default: `<leader>Tu`)
- Select multiple items in visual mode and use the same commands

Enhance your todos with custom |checkmate-metadata| with quick keymaps!


  Your .todo file is saved as regular markdown

==============================================================================
3. Commands                                               *checkmate-commands*


                                                *checkmate-:CheckmateToggle*


:CheckmateToggle                       Toggle the todo item under the cursor (normal mode) or all todo items within the selection (visual mode)


                                                *checkmate-:CheckmateCreate*


:CheckmateCreate                       Convert the current line to a todo item


                                                 *checkmate-:CheckmateCheck*


:CheckmateCheck                        Mark todo item as checked (done/completed)


                                               *checkmate-:CheckmateUncheck*


:CheckmateUncheck                      Mark todo item as unchecked


                                                  *checkmate-:CheckmateLint*


:CheckmateLint                         Perform limited linting of Checkmate buffer to warn about syntax issues that could cause unexpected plugin behavior




==============================================================================
4. Config                                                   *checkmate-config*

>lua
    --- Checkmate configuration
    ---@class checkmate.Config
    ---@field enabled boolean Whether the plugin is enabled
    ---@field notify boolean Whether to show notifications
    --- Filenames or patterns to activate Checkmate on when the filetype is 'markdown'
    --- - Patterns are CASE-SENSITIVE (e.g., "TODO" won't match "todo.md")
    --- - Include variations like {"TODO", "todo"} for case-insensitive matching
    --- - Patterns can include wildcards (*) for more flexible matching
    --- - Patterns without extensions (e.g., "TODO") will match files both with and without Markdown extension (e.g., "TODO" and "TODO.md")
    --- - Patterns with extensions (e.g., "TODO.md") will only match files with that exact extension
    --- - Examples: {"todo.md", "TODO", "*.todo", "todos/*"}
    ---@field files string[]
    ---@field log checkmate.LogSettings Logging settings
    ---Keymappings (false to disable)
    ---Note: mappings for metadata are set separately in the `metadata` table
    ---@field keys ( table<string, checkmate.Action>| false )
    ---@field todo_markers checkmate.TodoMarkers Characters for todo markers (checked and unchecked)
    ---@field default_list_marker "-" | "*" | "+" Default list item marker to be used when creating new Todo items
    ---@field style checkmate.StyleSettings Highlight settings
    --- Depth within a todo item's hierachy from which actions (e.g. toggle) will act on the parent todo item
    --- Examples:
    --- 0 = toggle only triggered when cursor/selection includes same line as the todo item/marker
    --- 1 = toggle triggered when cursor/selection includes any direct child of todo item
    --- 2 = toggle triggered when cursor/selection includes any 2nd level children of todo item
    ---@field todo_action_depth integer
    ---@field enter_insert_after_new boolean Enter insert mode after `:CheckmateCreate`
    ---Enable/disable the todo count indicator (shows number of sub-todo items completed)
    ---@field show_todo_count boolean
    ---Position to show the todo count indicator (if enabled)
    ---eol = End of the todo item line
    ---inline = After the todo marker, before the todo item text
    ---@field todo_count_position checkmate.TodoCountPosition
    ---Formatter function for displaying the todo count indicator
    ---@field todo_count_formatter? fun(completed: integer, total: integer): string
    ---Whether to count sub-todo items recursively in the todo_count
    ---If true, all nested todo items will count towards the parent todo's count
    ---@field todo_count_recursive boolean
    ---Whether to register keymappings defined in each metadata definition. If set the false,
    ---metadata actions (insert/remove) would need to be called programatically or otherwise mapped manually
    ---@field use_metadata_keymaps boolean
    ---Custom @tag(value) fields that can be toggled on todo items
    ---@field metadata checkmate.Metadata
    ---Config for the linter
    ---@field linter checkmate.LinterConfig?
    
    ---Actions that can be used for keymaps in the `keys` table of 'checkmate.Config'
    ---@alias checkmate.Action "toggle" | "check" | "uncheck" | "create" | "remove_all_metadata"
    
    ---Options for todo count indicator position
    ---@alias checkmate.TodoCountPosition "eol" | "inline"
    
    -----------------------------------------------------
    ---@class checkmate.LogSettings
    --- Any messages above this level will be logged
    ---@field level ("trace" | "debug" | "info" | "warn" | "error" | "fatal" | vim.log.levels.DEBUG | vim.log.levels.ERROR | vim.log.levels.INFO | vim.log.levels.TRACE | vim.log.levels.WARN)?
    --- Should print log output to a file
    --- Open with `:Checkmate debug_file`
    ---@field use_file boolean
    --- The default path on-disk where log files will be written to.
    --- Defaults to `~/.local/share/nvim/checkmate/current.log` (Unix) or `C:\Users\USERNAME\AppData\Local\nvim-data\checkmate\current.log` (Windows)
    ---@field file_path string?
    --- Should print log output to a scratch buffer
    --- Open with `require("checkmate").debug_log()`
    ---@field use_buffer boolean
    
    -----------------------------------------------------
    ---@class checkmate.TodoMarkers
    ---@field unchecked string Character used for unchecked items
    ---@field checked string Character used for checked items
    
    -----------------------------------------------------
    ---@class checkmate.StyleSettings Customize the style of markers and content
    ---@field list_marker_unordered vim.api.keyset.highlight Highlight settings for unordered list markers (-,+,*)
    ---@field list_marker_ordered vim.api.keyset.highlight Highlight settings for ordered (numerical) list markers (1.,2.)
    ---@field unchecked_marker vim.api.keyset.highlight Highlight settings for unchecked markers
    ---Highlight settings for main content of unchecked todo items
    ---This is typically the first line/paragraph
    ---@field unchecked_main_content vim.api.keyset.highlight
    ---Highlight settings for additional content of unchecked todo items
    ---This is the content below the first line/paragraph
    ---@field unchecked_additional_content vim.api.keyset.highlight
    ---@field checked_marker vim.api.keyset.highlight Highlight settings for checked markers
    ---Highlight settings for main content of checked todo items
    ---This is typically the first line/paragraph
    ---@field checked_main_content vim.api.keyset.highlight
    ---Highlight settings for additional content of checked todo items
    ---This is the content below the first line/paragraph
    ---@field checked_additional_content vim.api.keyset.highlight
    ---Highlight settings for the todo count indicator (e.g. x/x)
    ---@field todo_count_indicator vim.api.keyset.highlight
    
    -----------------------------------------------------
    ---@class checkmate.MetadataProps
    ---Additional string values that can be used interchangably with the canonical tag name.
    ---E.g. @started could have aliases of `{"initiated", "began"}` so that @initiated and @began could
    ---also be used and have the same styling/functionality
    ---@field aliases string[]?
    ---Highlight settings or function that returns highlight settings based on the metadata's current value
    ---@field style vim.api.keyset.highlight|fun(value:string):vim.api.keyset.highlight
    ---Function that returns the default value for this metadata tag
    ---@field get_value fun():string
    ---Keymapping for toggling this metadata tag
    ---@field key string?
    ---Used for displaying metadata in a consistent order
    ---@field sort_order integer?
    ---Moves the cursor to the metadata after it is inserted
    ---  - "tag" - moves to the beginning of the tag
    ---  - "value" - moves to the beginning of the value
    ---  - false - disables jump (default)
    ---@field jump_to_on_insert "tag" | "value" | false?
    ---Selects metadata text in visual mode after metadata is inserted
    ---The `jump_to_on_insert` field must be set (not false)
    ---The selected text will be the tag or value, based on jump_to_on_insert setting
    ---Default (false) - off
    ---@field select_on_insert boolean?
    ---Callback to run when this metadata tag is added to a todo item
    ---E.g. can be used to change the todo item state
    ---@field on_add fun(todo_item: checkmate.TodoItem)?
    ---Callback to run when this metadata tag is removed from a todo item
    ---E.g. can be used to change the todo item state
    ---@field on_remove fun(todo_item: checkmate.TodoItem)?
    
    ---A table of canonical metadata tag names and associated properties that define the look and function of the tag
    ---@alias checkmate.Metadata table<string, checkmate.MetadataProps>
    
    ---@class checkmate.LinterConfig
    ---@field enabled boolean -- Whether to enable the linter (vim.diagnostics)
    ---@field severity table<string, vim.diagnostic.Severity> -- Map of issues to diagnostic severity level
    --- TODO: @field auto_fix boolean Auto fix on buffer write
    
    -----------------------------------------------------
    ---@type checkmate.Config
    local _DEFAULTS = {
      enabled = true,
      notify = true,
      files = { "todo", "TODO", "*.todo*" }, -- matches TODO, TODO.md, .todo.md
      -- Default keymappings
      keys = {
        ["<leader>Tt"] = "toggle", -- Toggle todo item
        ["<leader>Tc"] = "check", -- Set todo item as checked (done)
        ["<leader>Tu"] = "uncheck", -- Set todo item as unchecked (not done)
        ["<leader>Tn"] = "create", -- Create todo item
        ["<leader>TR"] = "remove_all_metadata", -- Remove all metadata from a todo item
      },
      default_list_marker = "-",
      todo_markers = {
        unchecked = "â¡",
        checked = "â",
      },
      style = {
        -- List markers, such as "-" and "1."
        list_marker_unordered = {
          -- Can use util functions to get existing highlight colors and blend them together
          -- This is one way to integrate with an existing colorscheme
          fg = util.blend(util.get_hl_color("Normal", "fg", "#bbbbbb"), util.get_hl_color("Normal", "bg", "#222222"), 0.2),
        },
        list_marker_ordered = {
          fg = util.blend(util.get_hl_color("Normal", "fg", "#bbbbbb"), util.get_hl_color("Normal", "bg", "#222222"), 0.5),
        },
    
        -- Unchecked todo items
        unchecked_marker = { fg = "#ff9500", bold = true }, -- The marker itself
        unchecked_main_content = { fg = "#ffffff" }, -- Style settings for main content: typically the first line/paragraph
        unchecked_additional_content = { fg = "#dddddd" }, -- Settings for additional content
    
        -- Checked todo items
        checked_marker = { fg = "#00cc66", bold = true }, -- The marker itself
        checked_main_content = { fg = "#aaaaaa", strikethrough = true }, -- Style settings for main content: typically the first line/paragraph
        checked_additional_content = { fg = "#aaaaaa" }, -- Settings for additional content
    
        -- Todo count indicator
        todo_count_indicator = {
          fg = util.blend("#e3b3ff", util.get_hl_color("Normal", "bg", "'#222222"), 0.9),
          bg = util.blend("#ffffff", util.get_hl_color("Normal", "bg", "'#222222"), 0.02),
          italic = true,
        },
      },
      todo_action_depth = 1, --  Depth within a todo item's hierachy from which actions (e.g. toggle) will act on the parent todo item
      enter_insert_after_new = true, -- Should enter INSERT mode after :CheckmateCreate (new todo)
      show_todo_count = true,
      todo_count_position = "eol",
      todo_count_recursive = true,
      use_metadata_keymaps = true,
      metadata = {
        -- Example: A @priority tag that has dynamic color based on the priority value
        priority = {
          style = function(_value)
            local value = _value:lower()
            if value == "high" then
              return { fg = "#ff5555", bold = true }
            elseif value == "medium" then
              return { fg = "#ffb86c" }
            elseif value == "low" then
              return { fg = "#8be9fd" }
            else -- fallback
              return { fg = "#8be9fd" }
            end
          end,
          get_value = function()
            return "medium" -- Default priority
          end,
          key = "<leader>Tp",
          sort_order = 10,
          jump_to_on_insert = "value",
          select_on_insert = true,
        },
        -- Example: A @started tag that uses a default date/time string when added
        started = {
          aliases = { "init" },
          style = { fg = "#9fd6d5" },
          get_value = function()
            return tostring(os.date("%m/%d/%y %H:%M"))
          end,
          key = "<leader>Ts",
          sort_order = 20,
        },
        -- Example: A @done tag that also sets the todo item state when it is added and removed
        done = {
          aliases = { "completed", "finished" },
          style = { fg = "#96de7a" },
          get_value = function()
            return tostring(os.date("%m/%d/%y %H:%M"))
          end,
          key = "<leader>Td",
          on_add = function(todo_item)
            require("checkmate").set_todo_item(todo_item, "checked")
          end,
          on_remove = function(todo_item)
            require("checkmate").set_todo_item(todo_item, "unchecked")
          end,
          sort_order = 30,
        },
      },
      log = {
        level = "info",
        use_file = false,
        use_buffer = false,
      },
    }
<

Note: `checkmate.StyleSettings` uses highlight definition maps to define the
colors/style, refer to |nvim_set_hl()|


METADATA                                           *checkmate-config-metadata*

Metadata tags allow you to add custom `@tag(value)` annotations to todo items.



- Default tags:
    - `@started` - default value is the current date/time
    - `@done` - default value is the current date/time
    - `@priority` - "low" | "medium" (default) | "high"


@PRIORITY EXAMPLE

>lua
    priority = {
      -- Dynamic styling based on the tag's current value
      style = function(value)
        local value = value:lower()
        if value == "high" then
          return { fg = "#ff5555", bold = true }
        elseif value == "medium" then
          return { fg = "#ffb86c" }
        elseif value == "low" then
          return { fg = "#8be9fd" }
        else -- fallback
          return { fg = "#8be9fd" }
        end
      end,
      get_value = function() return "medium" end,  -- Default value
      key = "<leader>Tp",                          -- Keymap to toggle
      sort_order = 10,                             -- Order when multiple tags exist (lower comes first)
      jump_to_on_insert = "value",                 -- Move the cursor after insertion
      select_on_insert = true                      -- Select the 'value' (visual mode) on insert
    },
<


@DONE EXAMPLE

>lua
    done = {
      aliases = { "completed", "finished" },
      style = { fg = "#96de7a" },
      get_value = function()
        return tostring(os.date("%m/%d/%y %H:%M"))
      end,
      key = "<leader>Td",
      -- Changes todo state when tag is added
      on_add = function(todo_item)
        require("checkmate").set_todo_item(todo_item, "checked")
      end,
      -- Changes todo state when tag is removed
      on_remove = function(todo_item)
        require("checkmate").set_todo_item(todo_item, "unchecked")
      end,
      sort_order = 30,
    },
<


TODO COUNT INDICATOR                   *checkmate-config-todo-count-indicator*


Todo count indicator using eol position
Todo count indicator using inline position
CHANGE THE DEFAULT DISPLAY BY PASSING A CUSTOM FORMATTER

>lua
    -- Custom formatter that returns the % completed
    todo_count_formatter = function(completed, total)
      return string.format("%.0f%%", completed / total * 100)
    end,
<

Todo count indicator using todo_count_formatter function


COUNT ALL NESTED TODO ITEMS

If you want the todo count of a parent todo item to include _all_ nested todo
items, set the recursive option.

>lua
    todo_count_recursive = true,
<

Todo count indicator using recursive option. The children of 'Sub-task 3' are
included in the overall count of 'Big important task'.


==============================================================================
5. Linting                                                 *checkmate-linting*

Checkmate uses a _very_ limited custom linter in order require zero
dependencies but attempt to warn the user of Markdown (CommonMark spec)
formatting issues that could cause unexpected plugin behavior.


  The embedded linter is NOT a general-purpose Markdown linter and _may_
  interfere with other linting tools. Though, in testing with conform.nvim and
  prettier, I have not found any issues.

EXAMPLE

misaligned list marker

>md
    1. â Parent todo item
      - â Child todo item (indented only 2 spaces!)
<

correctly aligned list marker

>md
    1. â Parent todo item
       - â Child todo item (indented 3 spaces!)
<

The CommonMark spec <https://spec.commonmark.org/current> requires that nested
list markers begin at the col of the first non-whitespace content after the
parent list marker (which will be a different col for bullet list vs ordered
list markers)

If you feel comfortable with the nuances of Markdown list syntax, you can
disable the linter (default is enabled) via config:

>lua
    {
      linter = {
        enabled = false
      }
    }
<


==============================================================================
6. Roadmap                                                 *checkmate-roadmap*

Planned features:

- **Metadata support** - mappings for quick addition of metadata/tags such as
    @start, @done, @due, @priority, etc. with custom highlighting. _Added v0.2.0_
- **Archiving** - manually or automatically move completed items to the bottom of
    the document
- **Sub-task counter** - add a completed/total count (e.g.Â 1/4) to parent todo
    items. _Added v0.3.0_


==============================================================================
7. Contributing                                       *checkmate-contributing*

If you have feature suggestions or ideas, please feel free to open an issue on
GitHub!


==============================================================================
8. Credits                                                 *checkmate-credits*

- Inspired by the Todo+ <https://github.com/fabiospampinato/vscode-todo-plus> VS Code extension (credit to @fabiospampinato <https://github.com/fabiospampinato>)

==============================================================================
9. Links                                                     *checkmate-links*

1. *@started*: 
2. *@done*: 
3. *@priority*: 
4. *@your-custom-tag*: 
5. *@start*: 
6. *@done*: 
7. *@due*: 
8. *@priority*: 

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
